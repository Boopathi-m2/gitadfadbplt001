{
	"name": "PIPE_hist_data_migration_redshift_snowflake_child",
	"properties": {
		"activities": [
			{
				"name": "If table is transactional or full refresh",
				"type": "Switch",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@pipeline().parameters.type_of_load",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "TRANSACTIONAL",
							"activities": [
								{
									"name": "Unload_Redshift To S3_Transactional_Query",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "redshift_unload_query",
										"value": {
											"value": "@concat('unload ($$ select * from ', pipeline().parameters.Source_Schema,'.',pipeline().parameters.Source_Table,\n'$$ ) to ''s3://itx-arm-snowflake-external-stage/SBX_DNA_LAB1/AMAHIN01/DEV/',pipeline().parameters.Source_Schema,'_',pipeline().parameters.Source_Table,'/'' iam_role ''arn:aws:iam::580538643236:role/project/scm/itx-arm-app-dremioserver-developmentRole-1O5G0LI8M5O4H'' HEADER DELIMITER as ''|'' null ''\\\\N'' escape GZIP CLEANPATH PARALLEL TRUE MAXFILESIZE as 512 MB REGION as ''ap-southeast-1'' ;')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Snowflake_Transactional_Query",
									"description": "",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Unload_Redshift To S3_Transactional_Query",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "snowflakeQuery",
										"value": {
											"value": "@concat('truncate table ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,';',\n'COPY INTO ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,\n' FROM ''@APAHIL01_RAW.Test_POC_stage_s3/',pipeline().parameters.Source_Schema,'_',pipeline().parameters.Source_Table, '''',\n' FILE_FORMAT = ''APAHIL01_RAW.Test_POC_file_format_s3'' ',\n';')",
											"type": "Expression"
										}
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "Unload_Redshift To S3_Full_Refresh_Query",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "redshift_unload_query",
								"value": {
									"value": "@concat('unload ($$ select * from ', pipeline().parameters.Source_Schema,'.',pipeline().parameters.Source_Table,\n'$$ ) to ''s3://itx-arm-snowflake-external-stage/SBX_DNA_LAB2/',pipeline().parameters.Target_DB,'/',pipeline().parameters.Source_Schema,'_',pipeline().parameters.Source_Table,'/'' iam_role ''arn:aws:iam::580538643236:role/project/scm/itx-arm-app-dremioserver-developmentRole-1O5G0LI8M5O4H'' HEADER DELIMITER as ''|'' null ''\\\\N'' escape GZIP CLEANPATH PARALLEL TRUE MAXFILESIZE as 512 MB REGION as ''ap-southeast-1'' ;')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Snowflake_Full_Refresh_Query",
							"description": "",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Unload_Redshift To S3_Full_Refresh_Query",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "snowflakeQuery",
								"value": {
									"value": "@concat('truncate table ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,';',\n'COPY INTO ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,\n' FROM ''@', pipeline().parameters.Stage_Schema, '.DEV_CORE_STAGE_S3/',pipeline().parameters.Source_Schema,'_',pipeline().parameters.Source_Table, '''',\n' FILE_FORMAT = ''',pipeline().parameters.Stage_Schema, '.DEV_CORE_CSV_FILEFORMAT'' ',\n';')",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "If target is DNA_LOAD or DNA_CORE",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "Select count from redshift",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@pipeline().parameters.Target_DB",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "DEV_DNA_LOAD",
							"activities": [
								{
									"name": "Load to Snowflake Dna Load",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@variables('snowflakeQuery')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Select count from snowflake dna load",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Load to Snowflake Dna Load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('Select count(*) as count from ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Insert Status in Metadata as Completed DNA LOAD",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Select count from snowflake dna load",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP, SOURCE_COUNT, TARGET_COUNT) VALUES (',string(pipeline().parameters.Id),', ''Completed'',''SUCCESS'',''',pipeline().RunId, ''',current_timestamp, ', activity('Select count from redshift').output.value[0].count,', ',activity('Select count from snowflake dna load').output.resultSets[0].rows[0].count,'); ')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Insert Status in Metadata as Error_Sf_copy1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Load to Snowflake Dna Load",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "adfadbplt001lssnfkpltdnaload",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP) VALUES (',string(pipeline().parameters.Id),', ''Error SF'',''',replace(activity('Load to Snowflake Dna Load')?.error?.message,'''','\"'),''',''',pipeline().RunId, ''',current_timestamp); ')\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "Load to Snowflake Dna Core",
							"type": "Script",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "adfadbplt001lssnfkpltdnacore",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "@variables('snowflakeQuery')",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						},
						{
							"name": "Select count from snowflake dna Core",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "Load to Snowflake Dna Core",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "adfadbplt001lssnfkpltdnacore",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "@concat('Select count(*) as count from ',pipeline().parameters.Target_Schema,'.',pipeline().parameters.Target_Table,';')",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						},
						{
							"name": "Insert Status in Metadata as Completed DNA CORE",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "Select count from snowflake dna Core",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "adfadbplt001lssnfkpltdnaload",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP, SOURCE_COUNT, TARGET_COUNT) VALUES (',string(pipeline().parameters.Id),', ''Completed'',''SUCCESS'',''',pipeline().RunId, ''',current_timestamp, ', activity('Select count from redshift').output.value[0].count,', ',activity('Select count from snowflake dna Core').output.resultSets[0].rows[0].count,'); ')",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						},
						{
							"name": "Insert Status in Metadata as Error SF DNA CORE",
							"type": "Script",
							"dependsOn": [
								{
									"activity": "Load to Snowflake Dna Core",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "adfadbplt001lssnfkpltdnaload",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP) VALUES (',string(pipeline().parameters.Id),', ''Error SF'',''',replace(activity('Load to Snowflake Dna Core')?.error?.message,'''','\"'),''',''',pipeline().RunId, ''',current_timestamp); ')\n",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						}
					]
				}
			},
			{
				"name": "Unload from Redshift",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "If table is transactional or full refresh",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AmazonRedshiftSource",
						"query": {
							"value": "@variables('redshift_unload_query')",
							"type": "Expression"
						},
						"redshiftUnloadSettings": {
							"s3LinkedServiceName": {
								"referenceName": "adfadbplt001lsas3adpprd001",
								"type": "LinkedServiceReference"
							},
							"bucketName": "itx-arm-snowflake-external-stage"
						}
					},
					"dataset": {
						"referenceName": "AmazonRedshiftTable1",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Select count from redshift",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Unload from Redshift",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AmazonRedshiftSource",
						"query": {
							"value": "@concat('Select count(*) from ', pipeline().parameters.Source_Schema,'.',pipeline().parameters.Source_Table)",
							"type": "Expression"
						}
					},
					"dataset": {
						"referenceName": "AmazonRedshiftTable1",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Insert Status in Metadata as Error_Rd",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Unload from Redshift",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "adfadbplt001lssnfkpltdnaload",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('INSERT INTO META_RAW.HISTORICAL_OBJ_LOGS (ID, STATUS, MESSAGE,PIPELINE_DETAILS, LOAD_TIMESTAMP) VALUES (',string(pipeline().parameters.Id),', ''Error RD'',''',replace(activity('Unload from Redshift')?.error?.message,'''','\"'),''',''',pipeline().RunId, ''',current_timestamp); ')\n",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"parameters": {
			"Source_Schema": {
				"type": "string",
				"defaultValue": "RG_SDL"
			},
			"Source_Table": {
				"type": "string",
				"defaultValue": "SDL_SAP_ECC_SALES_ORG"
			},
			"Target_Schema": {
				"type": "string",
				"defaultValue": "SNAPASPSDL_RAW"
			},
			"Target_Table": {
				"type": "string",
				"defaultValue": "SDL_SAP_ECC_SALES_ORG"
			},
			"IsActive": {
				"type": "bool",
				"defaultValue": true
			},
			"Market": {
				"type": "string",
				"defaultValue": "Regional"
			},
			"type_of_load": {
				"type": "string",
				"defaultValue": "FULL_REFRESH"
			},
			"Id": {
				"type": "int",
				"defaultValue": 34
			},
			"Target_DB": {
				"type": "string",
				"defaultValue": "DEV_DNA_LOAD"
			},
			"Stage_Schema": {
				"type": "string",
				"defaultValue": "SNAPASPSDL_RAW"
			}
		},
		"variables": {
			"redshift_unload_query": {
				"type": "String"
			},
			"snowflakeQuery": {
				"type": "String"
			},
			"countQueryRedshift": {
				"type": "String"
			},
			"countQuerySnowflake": {
				"type": "String"
			},
			"target_count": {
				"type": "Integer"
			},
			"test": {
				"type": "String"
			}
		},
		"folder": {
			"name": "HIstorical_Data_migration_redshift_snowflake"
		},
		"annotations": []
	}
}