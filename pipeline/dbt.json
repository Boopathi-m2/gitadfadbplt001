{
	"name": "dbt",
	"properties": {
		"activities": [
			{
				"name": "read parameters",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "audit start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": {
							"value": "Select \n\"'jobId'\" AS jobId,\n\"'accountId'\" AS accountId,\n\"'waitTime'\" AS waitTime\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'jobId',\n'accountId',\n'waitTime'\n));",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "mtd_process",
						"type": "DatasetReference"
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "Trigger DBT Job",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Fetch Credential from Vault",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "RestSource",
						"httpRequestTimeout": "00:01:40",
						"requestInterval": "00.00:00:00.010",
						"requestMethod": "POST",
						"requestBody": "{\n  \"cause\": \"Triggered via ADF transformation pipeline\"\n}",
						"additionalHeaders": {
							"Content-Type": "application/json",
							"Authorization": {
								"value": "Token @{activity('Fetch Credential from Vault').output.value}",
								"type": "Expression"
							}
						},
						"paginationRules": {
							"supportRFC5988": "true"
						}
					},
					"sink": {
						"type": "JsonSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "JsonWriteSettings"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "DbtRestAPI",
						"type": "DatasetReference",
						"parameters": {
							"url": {
								"value": "api/v2/accounts/@{activity('read parameters').output.value[0].jobId}/jobs/@{activity('read parameters').output.value[0].accountId}/run/",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "DbtAPIResponse",
						"type": "DatasetReference",
						"parameters": {
							"tempContainer": "asp",
							"tempDirectory": "dev/dbt",
							"tempFileName": "dbtResponseTrigger.json"
						}
					}
				]
			},
			{
				"name": "Read response",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Trigger DBT Job",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "DbtAPIResponse",
						"type": "DatasetReference",
						"parameters": {
							"tempContainer": "asp",
							"tempDirectory": "dev/dbt",
							"tempFileName": "dbtResponseTrigger.json"
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Fetch Credential from Vault",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "read parameters",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "GET",
					"url": "https://akvadbplt001.vault.azure.net/secrets/adfadbplt001lsdbtclouddnacore?api-version=7.0",
					"connectVia": {
						"referenceName": "AutoResolveIntegrationRuntime",
						"type": "IntegrationRuntimeReference"
					},
					"authentication": {
						"type": "MSI",
						"resource": "https://vault.azure.net"
					}
				}
			},
			{
				"name": "audit start",
				"type": "ExecutePipeline",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": 0,
						"status": "START",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "wait until job is complete",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "get run id",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greaterOrEquals(variables('run_status'), 10)",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "wait a while before checking status",
							"type": "Wait",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"waitTimeInSeconds": {
									"value": "@int(activity('read parameters').output.value[0].waitTime)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "get dbt job statusw",
							"type": "WebActivity",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": true
							},
							"userProperties": [],
							"typeProperties": {
								"method": "GET",
								"headers": {
									"Authorization": {
										"value": "Token @{variables('dbtapitoken')}",
										"type": "Expression"
									}
								},
								"url": {
									"value": "https://cloud.getdbt.com/api/v2/accounts/@{variables('accountid')}/runs/@{variables('run_id')}/",
									"type": "Expression"
								},
								"connectVia": {
									"referenceName": "AutoResolveIntegrationRuntime",
									"type": "IntegrationRuntimeReference"
								}
							}
						},
						{
							"name": "set status value",
							"type": "SetVariable",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [
								{
									"activity": "Read Job Status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "run_status",
								"value": {
									"value": "@activity('get dbt job status').output.data?.status",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Get DBT Job Status",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "wait a while before checking status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "RestSource",
									"httpRequestTimeout": "00:01:40",
									"requestInterval": "00.00:00:00.010",
									"requestMethod": "GET",
									"additionalHeaders": {
										"Authorization": {
											"value": "Token @{activity('Fetch Credential from Vault').output.value}",
											"type": "Expression"
										}
									},
									"paginationRules": {
										"supportRFC5988": "true"
									}
								},
								"sink": {
									"type": "JsonSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "JsonWriteSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "DbtRestAPI",
									"type": "DatasetReference",
									"parameters": {
										"url": {
											"value": "api/v2/accounts/@{activity('read parameters').output.value[0].accountId}/runs/@{variables('run_id')}/",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "DbtAPIResponse",
									"type": "DatasetReference",
									"parameters": {
										"tempContainer": "asp",
										"tempDirectory": "dev/dbt",
										"tempFileName": "dbtResponseCurrentJobStatus.json"
									}
								}
							]
						},
						{
							"name": "Read Job Status",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Get DBT Job Status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "JsonSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "JsonReadSettings"
									}
								},
								"dataset": {
									"referenceName": "DbtAPIResponse",
									"type": "DatasetReference",
									"parameters": {
										"tempContainer": "asp",
										"tempDirectory": "dev/dbt",
										"tempFileName": "dbtResponseCurrentJobStatus.json"
									}
								},
								"firstRowOnly": false
							}
						}
					],
					"timeout": "0.12:00:00"
				}
			},
			{
				"name": "get run id",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Read response",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "run_id",
					"value": {
						"value": "@activity('Read response').output.data?.id",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"category": {
				"type": "string",
				"defaultValue": "test"
			},
			"usecase_id": {
				"type": "int",
				"defaultValue": 0
			},
			"sequence_id": {
				"type": "int",
				"defaultValue": 0
			},
			"process_id": {
				"type": "int",
				"defaultValue": 0
			},
			"phase_id": {
				"type": "int",
				"defaultValue": 0
			}
		},
		"variables": {
			"run_id": {
				"type": "Integer",
				"defaultValue": 0
			}
		},
		"folder": {
			"name": "Transformation/dbt"
		},
		"annotations": [],
		"lastPublishTime": "2023-11-28T12:20:59Z"
	}
}