{
	"name": "FILE_SYSTEM_v2",
	"properties": {
		"activities": [
			{
				"name": "audit start",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "START",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "read parameters",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "audit start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": {
							"value": "Select SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT,\n\"'filename'\" AS filename,\n\"'adls_path'\" as adls_path,\n\"'container'\" AS container,\n\"'filesystemName'\" AS filesystemName\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE,SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'filename',\n'adls_path',\n'container',\n'filesystemName'\n));",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "mtd_process",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Switch_FileSystem",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "read parameters",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@activity('read parameters').output.value[0].FILESYSTEMNAME",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "sawswfgsgpw0002",
							"activities": [
								{
									"name": "FileSystem_to_ADLS",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "file_system_source",
											"type": "DatasetReference",
											"parameters": {
												"File_Name": {
													"value": "@activity('read parameters').output.value[0].FILENAME",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinaryDestination",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@activity('read parameters').output.value[0].CONTAINER",
													"type": "Expression"
												},
												"directory": {
													"value": "@activity('read parameters').output.value[0].ADLS_PATH",
													"type": "Expression"
												},
												"fileName": {
													"value": "@activity('read parameters').output.value[0].FILESYSTEMNAME",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "error",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "FileSystem_to_ADLS",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "FileSystem_to_ADLS: @{activity('FileSystem_to_ADLS').error?.errorCode} @{activity('FileSystem_to_ADLS').error?.message}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								},
								{
									"name": "error log - move sql_server_to_alds",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "FileSystem_to_ADLS",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('FileSystem_to_ADLS').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('FileSystem_to_ADLS').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - sql_server_to_alds",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "FileSystem_to_ADLS",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue with folder path or file location : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].CONTAINER} \\n\n**LANDING_FILE_PATH**: @{activity('read parameters').output.value[0].ADLS_PATH} \\n\n**LANDING_FILE_NAME**: @{activity('read parameters').output.value[0].FILENAME} \\n\n**ERROR**: _@{activity('FileSystem_to_ADLS').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes"
										}
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "Fail - SFTP Source",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "Set error unknown ftp",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": "Fail - FTP Source Unknown",
								"errorCode": "404"
							}
						},
						{
							"name": "Set error unknown ftp",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "errorResponse1",
								"value": " SFTP Source Unknown"
							}
						}
					]
				}
			},
			{
				"name": "FilterOnlyFile",
				"type": "Filter",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Switch_FileSystem",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@json(variables('getFiles'))",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(item().type,'File')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "ForEveryFileInFTP",
				"type": "ForEach",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "FilterOnlyFile",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('FilterOnlyFile').output.Value",
						"type": "Expression"
					},
					"isSequential": false,
					"batchCount": 20,
					"activities": [
						{
							"name": "Execute SFTP_To_ADLS",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "SFTP_To_ADLS",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"FtpDirectory": {
										"value": "@activity('read parameters').output.value[0].ftpDirectory",
										"type": "Expression"
									},
									"FtpFileName": {
										"value": "@item().Name",
										"type": "Expression"
									},
									"FtpName": {
										"value": "@activity('read parameters').output.value[0].ftpName",
										"type": "Expression"
									},
									"AdlsContainer": {
										"value": "@activity('read parameters').output.value[0].container",
										"type": "Expression"
									},
									"AdlsPath": {
										"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].FOLDER_PATH}",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"usecase_id": {
										"value": "@pipeline().parameters.usecase_id",
										"type": "Expression"
									},
									"sequence_id": {
										"value": "@pipeline().parameters.sequence_id",
										"type": "Expression"
									},
									"process_id": {
										"value": "@pipeline().parameters.process_id",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									},
									"isUnzipNeeded": {
										"value": "@activity('read parameters').output.value[0].isUnzipNeeded",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "audit fail - directory not present",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Switch_FileSystem",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "error log - directory not present",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Switch_FileSystem",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_error_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"job_name": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"error_message": {
							"value": "@variables('errorResponse1')",
							"type": "Expression"
						},
						"run_id": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						},
						"error_code": "00",
						"job_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Send error - directory not present",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Switch_FileSystem",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "NotifiyTeamsChannelPipeline",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"subscription": {
							"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
							"type": "Expression"
						},
						"resourceGroup": {
							"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
							"type": "Expression"
						},
						"runId": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"name": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"triggerTime": {
							"value": "@pipeline().TriggerTime",
							"type": "Expression"
						},
						"status": "FAIL",
						"supportMessage": {
							"value": "There is some issue with folder path or file location : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**FTP_NAME**: @{activity('read parameters').output.value[0].ftpName} \\n\n**FTP_DIRECTORY**: @{activity('read parameters').output.value[0].ftpDirectory} \\n\n**FILE_PREFIX**: @{activity('read parameters').output.value[0].FILE_SPEC} \\n\n**ERROR**: _@{variables('errorResponse1')}_",
							"type": "Expression"
						},
						"isBusinessNotification": "No",
						"isSupportNotification": "Yes",
						"isError": "Yes"
					}
				}
			},
			{
				"name": "audit success",
				"type": "ExecutePipeline",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "ForEveryFileInFTP",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FINISH",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "audit fail",
				"type": "ExecutePipeline",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "ForEveryFileInFTP",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			}
		],
		"parameters": {
			"category": {
				"type": "string",
				"defaultValue": "PCF_PROMAX"
			},
			"usecase_id": {
				"type": "int",
				"defaultValue": 147
			},
			"sequence_id": {
				"type": "int",
				"defaultValue": 1
			},
			"process_id": {
				"type": "int",
				"defaultValue": 586
			},
			"phase_id": {
				"type": "int",
				"defaultValue": 1
			}
		},
		"variables": {
			"getFiles": {
				"type": "String"
			},
			"sheet_names": {
				"type": "Array"
			},
			"emptyArray": {
				"type": "Array",
				"defaultValue": []
			},
			"errorResponse1": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Ingestion/Sources"
		},
		"annotations": [],
		"lastPublishTime": "2023-11-28T12:20:59Z"
	}
}