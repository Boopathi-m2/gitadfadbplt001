{
	"name": "Data_Export",
	"properties": {
		"activities": [
			{
				"name": "Audit_Start",
				"type": "ExecutePipeline",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "START",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Audit_Finish_Success",
				"type": "ExecutePipeline",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "If no quotes",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "REFRESH STARTED SEPARATELY",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category), '. Check status from Tableau Refresh Status pipeline.')",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "read parameters",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set parentFolder",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": {
							"value": "Select \n\"'db_source'\" AS db_source,\n\"'target_folder_path'\" AS target_folder_path,\n\"'target_file_name'\" AS target_file_name,\n\"'target_file_extn'\" AS target_file_extn,\n\"'unloading_query'\" AS unloading_query,\n\"'container'\" AS container,\nIFNULL(\"'quotesEnclosed'\",'N') AS quotesEnclosed,\nIFNULL(\"'headerNeeded'\",'Y') AS headerNeeded\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'db_source',\n'target_folder_path',\n'target_file_name',\n'target_file_extn',\n'unloading_query',\n'container',\n'quotesEnclosed',\n'headerNeeded'\n));",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "mtd_process",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Set parentFolder",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Audit_Start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "parentFolder",
					"value": {
						"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Switch db source",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "read parameters",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@{activity('read parameters').output.value[0].db_source}",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "dna_core",
							"activities": [
								{
									"name": "error log - move dna_core_to_adls csv",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Export Dna Core Data into ADLS csv",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "write_error_log",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"process_id": {
												"value": "@pipeline().parameters.process_id",
												"type": "Expression"
											},
											"job_name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"error_message": {
												"value": "@activity('Export Dna Core Data into ADLS csv').error?.message",
												"type": "Expression"
											},
											"run_id": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"category": {
												"value": "@pipeline().parameters.category",
												"type": "Expression"
											},
											"phase_id": {
												"value": "@pipeline().parameters.phase_id",
												"type": "Expression"
											},
											"error_code": {
												"value": "@activity('Export Dna Core Data into ADLS csv').error?.errorCode",
												"type": "Expression"
											},
											"job_id": {
												"value": "@pipeline()?.TriggeredByPipelineRunId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Send error - Export Dna Core Data into ADLS csv",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Export Dna Core Data into ADLS csv",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "NotifiyTeamsChannelPipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"subscription": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
												"type": "Expression"
											},
											"resourceGroup": {
												"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
												"type": "Expression"
											},
											"runId": {
												"value": "@pipeline().RunId",
												"type": "Expression"
											},
											"name": {
												"value": "@pipeline().Pipeline",
												"type": "Expression"
											},
											"triggerTime": {
												"value": "@pipeline().TriggerTime",
												"type": "Expression"
											},
											"status": "FAIL",
											"supportMessage": {
												"value": "There is some issue while exporting data from dna core into ADLS : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**unloading_query**: @{activity('read parameters').output.value[0].unloading_query} \\n\n**CONTAINER**: @{activity('read parameters').output.value[0].container} \\n\n**TARGET_FILE_PATH**: @{activity('read parameters').output.value[0].target_folder_path} \\n\n**TARGET_FILE_NAME**: @{activity('read parameters').output.value[0].target_file_name} \\n\n**ERROR**: _@{activity('Export Dna Core Data into ADLS csv').error?.message}_",
												"type": "Expression"
											},
											"isBusinessNotification": "No",
											"isSupportNotification": "Yes",
											"isError": "Yes"
										}
									}
								},
								{
									"name": "Export Dna Core Data into ADLS csv error",
									"type": "Fail",
									"dependsOn": [
										{
											"activity": "Export Dna Core Data into ADLS csv",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"message": {
											"value": "Error While Exporting Dna Core Data into ADLS: @{activity('Export Dna Core Data into ADLS csv').error?.errorCode} @{activity('Export Dna Core Data into ADLS csv').error?.message}",
											"type": "Expression"
										},
										"errorCode": "2000"
									}
								},
								{
									"name": "Export Dna Core Data into ADLS csv",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeSource",
											"query": {
												"value": "@{activity('read parameters').output.value[0].unloading_query}",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand",
												"additionalCopyOptions": {
													"MAX_FILE_SIZE": "524288000",
													"OVERWRITE": "TRUE"
												}
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DNA_CORE_Dataset",
											"type": "DatasetReference"
										}
									],
									"outputs": [
										{
											"referenceName": "data_export_csv_tsv_blob_sink",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@{activity('read parameters').output.value[0].container}",
													"type": "Expression"
												},
												"directory": {
													"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
													"type": "Expression"
												},
												"file": {
													"value": "@{activity('read parameters').output.value[0].target_file_name}.@{activity('read parameters').output.value[0].target_file_extn}",
													"type": "Expression"
												},
												"quotesEnclosed": {
													"value": "@activity('read parameters').output.value[0].quotesEnclosed",
													"type": "Expression"
												},
												"headerNeeded": {
													"value": "@activity('read parameters').output.value[0].headerNeeded",
													"type": "Expression"
												},
												"delimeter": {
													"value": "@if(equals(activity('read parameters').output.value[0].target_file_extn,'csv'),',','\\t')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "Unknown source",
							"type": "Fail",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "Unknown source type: @{activity('read parameters').output.value[0].db_source}",
									"type": "Expression"
								},
								"errorCode": "2000"
							}
						}
					]
				}
			},
			{
				"name": "Audit_Finish_Fail",
				"type": "ExecutePipeline",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Switch db source",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "If no quotes",
				"type": "IfCondition",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [
					{
						"activity": "Switch db source",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@if(equals(activity('read parameters').output.value[0].quotesEnclosed,'N'),true, false)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Export ADLS to ADLS no quote",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobStorageReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"enableStaging": false
							},
							"inputs": [
								{
									"referenceName": "data_export_csv_tsv_blob_sink",
									"type": "DatasetReference",
									"parameters": {
										"container": {
											"value": "@{activity('read parameters').output.value[0].container}",
											"type": "Expression"
										},
										"directory": {
											"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
											"type": "Expression"
										},
										"file": {
											"value": "@{activity('read parameters').output.value[0].target_file_name}.@{activity('read parameters').output.value[0].target_file_extn}",
											"type": "Expression"
										},
										"quotesEnclosed": "Y",
										"headerNeeded": {
											"value": "@activity('read parameters').output.value[0].headerNeeded",
											"type": "Expression"
										},
										"delimeter": {
											"value": "@if(equals(activity('read parameters').output.value[0].target_file_extn,'csv'),',','\\t')",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			}
		],
		"parameters": {
			"category": {
				"type": "string",
				"defaultValue": "test"
			},
			"usecase_id": {
				"type": "int",
				"defaultValue": 359
			},
			"phase_id": {
				"type": "int",
				"defaultValue": 3
			},
			"sequence_id": {
				"type": "int",
				"defaultValue": 1
			},
			"process_id": {
				"type": "int",
				"defaultValue": 1899
			}
		},
		"variables": {
			"parentFolder": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Consumption/Consumption Systems"
		},
		"annotations": [],
		"lastPublishTime": "2023-11-23T12:26:48Z"
	}
}