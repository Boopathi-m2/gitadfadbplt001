{
	"name": "s3_to_adls",
	"properties": {
		"activities": [
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "get_metadata",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('get_metadata').output.value",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "if_file_exists",
							"type": "GetMetadata",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [
								{
									"activity": "Filter Only File",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "s3_source_binary",
									"type": "DatasetReference",
									"parameters": {
										"bucket": "@item().S3_BUCKET",
										"path": "@item().S3_PATH",
										"file": "@item().S3_FILE"
									}
								},
								"fieldList": [
									"exists"
								],
								"storeSettings": {
									"type": "AmazonS3ReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							}
						},
						{
							"name": "If Condition1",
							"type": "IfCondition",
							"state": "Inactive",
							"onInactiveMarkAs": "Succeeded",
							"dependsOn": [
								{
									"activity": "if_file_exists",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@activity('if_file_exists').output.exists",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "s3_to_adls",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "BinarySource",
												"storeSettings": {
													"type": "AmazonS3ReadSettings",
													"recursive": true
												},
												"formatSettings": {
													"type": "BinaryReadSettings"
												}
											},
											"sink": {
												"type": "BinarySink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												}
											},
											"enableStaging": false
										},
										"inputs": [
											{
												"referenceName": "s3_source_binary",
												"type": "DatasetReference",
												"parameters": {
													"bucket": {
														"value": "@item().S3_BUCKET",
														"type": "Expression"
													},
													"path": {
														"value": "@item().S3_PATH",
														"type": "Expression"
													},
													"file": {
														"value": "@item().S3_FILE",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "adls_sink_binary",
												"type": "DatasetReference",
												"parameters": {
													"adls_container": {
														"value": "@item().ADLS_CONTAINER",
														"type": "Expression"
													},
													"adls_path": {
														"value": "@item().ADLS_PATH",
														"type": "Expression"
													}
												}
											}
										]
									}
								]
							}
						},
						{
							"name": "get file name",
							"type": "GetMetadata",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataset": {
									"referenceName": "s3_source_binary",
									"type": "DatasetReference",
									"parameters": {
										"bucket": {
											"value": "@item().S3_BUCKET",
											"type": "Expression"
										},
										"path": {
											"value": "@item().S3_PATH",
											"type": "Expression"
										},
										"file": {
											"value": "@concat('*',item().S3_FILE,'*.*')",
											"type": "Expression"
										}
									}
								},
								"fieldList": [
									"childItems"
								],
								"storeSettings": {
									"type": "AmazonS3ReadSettings",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							}
						},
						{
							"name": "Filter Only File",
							"type": "Filter",
							"dependsOn": [
								{
									"activity": "get file name",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"items": {
									"value": "@activity('get file name').output.childItems",
									"type": "Expression"
								},
								"condition": {
									"value": "@equals(item().type,'File')",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "get_metadata",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": "select *\nfrom\nmeta_raw.s3_to_adls",
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "mtd_process",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			}
		],
		"folder": {
			"name": "Miscellaneous Pipelines"
		},
		"annotations": []
	}
}