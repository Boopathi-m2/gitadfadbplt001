{
	"name": "Mbox_File_Copy",
	"properties": {
		"activities": [
			{
				"name": "Audit_Start",
				"type": "ExecutePipeline",
				"state": "Inactive",
				"onInactiveMarkAs": "Succeeded",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "START",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "read parameters",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set parentFolder",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": {
							"value": "Select \n\"'prefix_flag'\" AS prefix_flag,\n\"'suffix_flag'\" AS suffix_flag,\n\"'split_file'\" AS split_file,\n\"'target_folder_path'\" AS target_folder_path,\n\"'target_file_name'\" AS target_file_name,\n\"'source_folder_path'\" AS source_folder_path,\n\"'source_file_name'\" AS source_file_name,\n\"'file_extn'\" AS file_extn,\n\"'container'\" AS container,\n\"'encoding'\" AS encoding\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'prefix_flag',\n'suffix_flag',\n'split_file',\n'target_folder_path',\n'target_file_name',\n'source_folder_path',\n'source_file_name',\n'file_extn',\n'container',\n'encoding'\n));",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "mtd_process",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Set parentFolder",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Audit_Start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "parentFolder",
					"value": {
						"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "If prefix or suffix",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Set dateCYYMMDD",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(activity('read parameters').output.value[0].prefix_flag,'Y')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Set fileNameWithDateSuffix",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "fileNameWithDate",
								"value": {
									"value": "@{activity('read parameters').output.value[0].target_file_name}_@{variables('dateCCYYMMDD')}",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Set fileNameWithDatePrefix",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "fileNameWithDate",
								"value": {
									"value": "@{variables('dateCCYYMMDD')}_@{activity('read parameters').output.value[0].target_file_name}",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Set dateCYYMMDD",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "read parameters",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "dateCCYYMMDD",
					"value": {
						"value": "@formatDateTime(convertTimeZone(UTCnow(),'UTC','Tokyo Standard Time'), 'yyyy-MM-dd')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Switch For Encoding",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "If prefix or suffix",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@activity('read parameters').output.value[0].encoding",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "windows-31j",
							"activities": [
								{
									"name": "sp call",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 1
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "Move File",
							"type": "Copy",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"maxRowsPerFile": {
											"value": "@if(equals(activity('read parameters').output.value[0].split_file,'Y'),2000,5000000)",
											"type": "Expression"
										},
										"fileNamePrefix": "",
										"quoteAllText": true,
										"fileExtension": ".txt"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "Mbox_File_Copy_adls",
									"type": "DatasetReference",
									"parameters": {
										"container": {
											"value": "@activity('read parameters').output.value[0].container",
											"type": "Expression"
										},
										"directory": {
											"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
											"type": "Expression"
										},
										"fileName": {
											"value": "@{activity('read parameters').output.value[0].source_file_name}.@{activity('read parameters').output.value[0].file_extn}",
											"type": "Expression"
										},
										"encoding": "UTF-8",
										"delimeter": {
											"value": "@if(equals(activity('read parameters').output.value[0].file_extn,'csv'),',','\\t')",
											"type": "Expression"
										}
									}
								}
							],
							"outputs": [
								{
									"referenceName": "Mbox_File_Copy_adls",
									"type": "DatasetReference",
									"parameters": {
										"container": {
											"value": "@activity('read parameters').output.value[0].container",
											"type": "Expression"
										},
										"directory": {
											"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].target_folder_path}",
											"type": "Expression"
										},
										"fileName": "@if(equals(activity('read parameters').output.value[0].split_file,'Y'),'',concat(variables('fileNameWithDate'),activity('read parameters').output.value[0].file_extn))",
										"encoding": "@activity('read parameters').output.value[0].encoding",
										"delimeter": {
											"value": "@if(equals(activity('read parameters').output.value[0].file_extn,'csv'),',','\\t')",
											"type": "Expression"
										}
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "Move to Achive",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Switch For Encoding",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "Mbox_File_Copy_adls",
						"type": "DatasetReference",
						"parameters": {
							"container": {
								"value": "@activity('read parameters').output.value[0].container",
								"type": "Expression"
							},
							"directory": {
								"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}",
								"type": "Expression"
							},
							"fileName": {
								"value": "@{activity('read parameters').output.value[0].source_file_name}.@{activity('read parameters').output.value[0].file_extn}",
								"type": "Expression"
							},
							"encoding": "UTF-8",
							"delimeter": {
								"value": "@if(equals(activity('read parameters').output.value[0].file_extn,'csv'),',','\\t')",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "Mbox_File_Copy_adls",
						"type": "DatasetReference",
						"parameters": {
							"container": {
								"value": "@activity('read parameters').output.value[0].container",
								"type": "Expression"
							},
							"directory": {
								"value": "@{variables('parentFolder')}/@{activity('read parameters').output.value[0].source_folder_path}/archive",
								"type": "Expression"
							},
							"fileName": {
								"value": "@{variables('fileNameWithDate')}.@{activity('read parameters').output.value[0].file_extn}",
								"type": "Expression"
							},
							"encoding": "UTF-8",
							"delimeter": {
								"value": "@if(equals(activity('read parameters').output.value[0].file_extn,'csv'),',','\\t')",
								"type": "Expression"
							}
						}
					}
				]
			}
		],
		"parameters": {
			"category": {
				"type": "string",
				"defaultValue": "test"
			},
			"usecase_id": {
				"type": "int",
				"defaultValue": 370
			},
			"phase_id": {
				"type": "int",
				"defaultValue": 3
			},
			"sequence_id": {
				"type": "int",
				"defaultValue": 1
			},
			"process_id": {
				"type": "int",
				"defaultValue": 1950
			}
		},
		"variables": {
			"parentFolder": {
				"type": "String"
			},
			"fileNameWithDate": {
				"type": "String"
			},
			"dateCCYYMMDD": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Consumption/Consumption Systems"
		},
		"annotations": [],
		"lastPublishTime": "2023-11-23T12:26:48Z"
	}
}