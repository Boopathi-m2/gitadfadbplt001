{
	"name": "HTTP",
	"properties": {
		"activities": [
			{
				"name": "audit start",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "START",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "read parameters",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "audit start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": {
							"value": "SELECT \nNULL AS SNOWFLAKE_STAGE,\nNULL AS SNOWFLAKE_FILE_FORMAT,\nNULL AS targetfile,\n'rex/rdl' as adls_path,\n'asp' AS container,\nNULL AS sourceurl,\n'query' AS sourcetype,\n'select row_number() over(order by create_dt desc) rn, photo_key||''.jpg'' AS TARGET, RESPONSE AS SOURCE from ntaitg_integration.itg_photo_mgmnt_url WHERE UPLOAD_PHOTO_FLAG =''Y'' LIMIT 600;' AS sourcequery;\n/*SELECT \nNULL AS SNOWFLAKE_STAGE,\nNULL AS SNOWFLAKE_FILE_FORMAT,\n'tasks_B1B1C3C59389C4A22A03946D8BA7320C_42148_647914_1.jpg' AS targetfile,\n'rex/rdl' as adls_path,\n'asp' AS container,\n'https://www.thepopsystem.com/docs/pics/701/2024-07-10/65175/701_65175_1720590538000.jpg' AS sourceurl,\n'url' AS sourcetype,\nNULL AS sourcequery;\n\nSELECT SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT,\n\"'filename'\" AS targetfile,\n\"'adls_path'\" as adls_path,\n\"'container'\" AS container,\n\"'sourceurl'\" AS sourceurl,\n\"'sourcetype'\" AS sourcetype,\n\"'sourcequery'\" AS sourcequery\nFROM (SELECT PARAMETERS.PARAMETER_NAME,lower(PARAMETER_VALUE) AS PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE,SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = 10\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'sourcetype',\n'adls_path',\n'container',\n'sourceurl',\n'filename',\n'sourcequery'\n));*/",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "mtd_process",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "audit fail - Switch_FileSystem",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "repeatreading",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "audit success",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "repeatreading",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FINISH",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "get_row_count",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "read parameters",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": {
							"value": "@if(equals(toLower(activity('read parameters').output.value[0].sourcetype), 'query'),\n    concat('SELECT COUNT(1) AS ROW_COUNT FROM (',replace(activity('read parameters').output.value[0].sourcequery,';',''),')'),\n    'SELECT 1 AS ROW_COUNT')\n",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "DNA_CORE_Dataset",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "set_total_iter_count",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "get_row_count",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "total_reads",
					"value": {
						"value": "@if(\n    greater(activity('get_row_count').output.firstRow.row_count,5000),\n    int(substring(string(add(div(activity('get_row_count').output.firstRow.row_count,5000),1)),0,indexOf(string(add(div(activity('get_row_count').output.firstRow.row_count,5000),1)),'.'))),1)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "repeatreading",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "set_total_iter_count",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greater(variables('current_iter'),variables('total_reads'))",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "read_source_records",
							"type": "Script",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "adfadbplt001lssnfkpltdnacore",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "SELECT SOURCE, TARGET FROM \n(\n    @{if(equals(toLower(activity('read parameters').output.value[0].sourcetype), 'query'),replace(if(contains(activity('read parameters').output.value[0].sourcequery,' RN'),activity('read parameters').output.value[0].sourcequery,replace(activity('read parameters').output.value[0].sourcequery,'SELECT ','SELECT ROW_NUMBER() OVER(ORDER BY NULL) AS RN,')),';',''),\n    concat('SELECT 1 AS RN,''',activity('read parameters').output.value[0].sourceurl,''' AS SOURCE, ''', activity('read parameters').output.value[0].targetfile,''' AS TARGET'))}\n) \nWHERE RN > (@{variables('current_iter')}- 1) * 5000\nAND RN <= @{variables('current_iter')}*5000",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						},
						{
							"name": "increment_iteration",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "download_from_web",
									"dependencyConditions": [
										"Completed"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "temp_var",
								"value": {
									"value": "@add(variables('current_iter'),1)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "assign_iteration",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "increment_iteration",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "current_iter",
								"value": {
									"value": "@variables('temp_var')",
									"type": "Expression"
								}
							}
						},
						{
							"name": "download_from_web",
							"type": "ExecutePipeline",
							"dependsOn": [
								{
									"activity": "read_source_records",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "WEB_TO_ADLS",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"SourceNTarget": {
										"value": "@activity('read_source_records').output.resultSets[0].rows",
										"type": "Expression"
									},
									"container": {
										"value": "@activity('read parameters').output.value[0].container",
										"type": "Expression"
									},
									"filepath": {
										"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].adls_path}",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "stop_loop_with_error",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "read_source_records",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "@activity('read_source_records').error?.message",
									"type": "Expression"
								},
								"errorCode": {
									"value": "@activity('read_source_records').error?.errorCode",
									"type": "Expression"
								}
							}
						},
						{
							"name": "assign_iteration_on_fail",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "read_source_records",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "current_iter",
								"value": {
									"value": "@add(variables('total_reads'),1)",
									"type": "Expression"
								}
							}
						}
					],
					"timeout": "0.12:00:00"
				}
			}
		],
		"parameters": {
			"category": {
				"type": "string"
			},
			"usecase_id": {
				"type": "int"
			},
			"sequence_id": {
				"type": "int"
			},
			"process_id": {
				"type": "int"
			},
			"phase_id": {
				"type": "int"
			}
		},
		"variables": {
			"getFiles": {
				"type": "String"
			},
			"errorResponse1": {
				"type": "String"
			},
			"SourceNTarget": {
				"type": "Array"
			},
			"total_reads": {
				"type": "Integer",
				"defaultValue": 1
			},
			"temp_var": {
				"type": "Integer"
			},
			"current_iter": {
				"type": "Integer",
				"defaultValue": 1
			}
		},
		"folder": {
			"name": "Ingestion/Sources"
		},
		"annotations": [],
		"lastPublishTime": "2023-11-28T12:20:59Z"
	}
}