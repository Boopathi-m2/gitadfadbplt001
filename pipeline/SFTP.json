{
	"name": "SFTP",
	"properties": {
		"activities": [
			{
				"name": "audit start",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "START",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is executing for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "read parameters",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "audit start",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": {
							"value": "Select SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT,\n\"'val_file_header'\" AS val_file_header,\n\"'file_spec'\" AS file_spec,\n\"'val_file_name'\" AS val_file_name,\n\"'val_file_extn'\" AS val_file_extn,\n\"'load_method'\" AS load_method,\n\"'sp_name'\" AS sp_name,\n\"'sheet_index'\" AS sheet_index,\n\"'folder_path'\" AS folder_path,\n\"'target_table'\" AS target_table,\n\"'container'\" AS container,\n\"'target_schema'\" AS target_schema,\n\"'validation'\" AS validation,\n\"'index'\" AS index,\n\"'source_extn'\" AS source_extn,\n\"'sheet_names'\" AS sheet_names,\n\"'file_header_row_num'\" AS file_header_row_num,\n\"'is_truncate'\" AS is_truncate,\n\"'startRange'\" AS startRange,\nIFNULL(\"'is_direct_load'\",'N') AS is_direct_load,\n\"'header_regex'\" AS header_regex,\n\"'is_forced_truncate'\" AS is_forced_truncate,\n\"'ftpName'\" AS ftpName,\n\"'ftpDirectory'\" AS ftpDirectory\nfrom (SELECT PARAMETERS.PARAMETER_NAME,PARAMETER_VALUE,PARAMETER_GROUP_NAME,IS_SENSITIVE,SNOWFLAKE_STAGE, SNOWFLAKE_FILE_FORMAT\nFROM META_RAW.PARAMETERS \nJOIN META_RAW.PROCESS USING (PARAMETER_GROUP_ID)\nWHERE PROCESS_ID = @{pipeline().parameters.process_id}\nAND IS_ACTIVE = TRUE)\nas A pivot ( MAX (PARAMETER_VALUE) for PARAMETER_NAME in (\n'val_file_header',\n'file_spec',\n'val_file_name',\n'val_file_extn',\n'load_method',\n'sp_name',\n'sheet_index',\n'folder_path',\n'target_table',\n'container',\n'target_schema',\n'validation',\n'index',\n'source_extn',\n'sheet_names',\n'file_header_row_num',\n'is_truncate',\n'startRange',\n'is_direct_load',\n'header_regex',\n'is_forced_truncate',\n'ftpName',\n'ftpDirectory'\n));",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "mtd_process",
						"type": "DatasetReference"
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Switch SFTP",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "read parameters",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@activity('read parameters').output.value[0].ftpName",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "iqviaaus",
							"activities": [
								{
									"name": "Get files iqviaaus",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BinarySFTPiqviaaus",
											"type": "DatasetReference",
											"parameters": {
												"directory": {
													"value": "@{activity('read parameters').output.value[0].ftpDirectory}",
													"type": "Expression"
												},
												"filename": {
													"value": "*@{activity('read parameters').output.value[0].file_spec}*.@{activity('read parameters').output.value[0].source_extn}",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "SftpReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false,
											"disableChunking": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "files iqviaaus",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get files iqviaaus",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "getFiles",
										"value": {
											"value": "@string(activity('Get files iqviaaus').output.childItems)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set error iqviaaus",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get files iqviaaus",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorResponse",
										"value": {
											"value": "@activity('Get files iqviaaus').error?.message",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"value": "perensoaus",
							"activities": [
								{
									"name": "Get files perensoaus",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BinarySFTPperensoaus",
											"type": "DatasetReference",
											"parameters": {
												"directory": {
													"value": "@{activity('read parameters').output.value[0].ftpDirectory}",
													"type": "Expression"
												},
												"filename": {
													"value": "*@{activity('read parameters').output.value[0].file_spec}*.@{activity('read parameters').output.value[0].source_extn}",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "SftpReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false,
											"disableChunking": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "files perensoaus",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get files perensoaus",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "getFiles",
										"value": {
											"value": "@string(activity('Get files perensoaus').output.childItems)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set error exacttargetphl_copy1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get files perensoaus",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorResponse",
										"value": {
											"value": "@activity('Get files perensoaus').error?.message",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"value": "exacttargetphl",
							"activities": [
								{
									"name": "Get files exacttargetphl",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BinarySFTPexacttargetphl",
											"type": "DatasetReference",
											"parameters": {
												"directory": {
													"value": "@{activity('read parameters').output.value[0].ftpDirectory}",
													"type": "Expression"
												},
												"filename": {
													"value": "*@{activity('read parameters').output.value[0].file_spec}*.@{activity('read parameters').output.value[0].source_extn}",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "SftpReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false,
											"disableChunking": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "files exacttargetphl",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get files exacttargetphl",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "getFiles",
										"value": {
											"value": "@string(activity('Get files exacttargetphl').output.childItems)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set error exacttargetphl",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get files exacttargetphl",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorResponse",
										"value": {
											"value": "@activity('Get files exacttargetphl').error?.message",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"value": "marketingcloudopsphl",
							"activities": [
								{
									"name": "Get files marketingcloudopsphl",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BinarySFTPmarketingcloudopsphl",
											"type": "DatasetReference",
											"parameters": {
												"directory": {
													"value": "@{activity('read parameters').output.value[0].ftpDirectory}",
													"type": "Expression"
												},
												"filename": {
													"value": "*@{activity('read parameters').output.value[0].file_spec}*.@{activity('read parameters').output.value[0].source_extn}",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "SftpReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false,
											"disableChunking": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "files marketingcloudopsphl",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get files marketingcloudopsphl",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "getFiles",
										"value": {
											"value": "@string(activity('Get files marketingcloudopsphl').output.childItems)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set error marketingcloudopsphl",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get files marketingcloudopsphl",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorResponse",
										"value": {
											"value": "@activity('Get files marketingcloudopsphl').error?.message",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"value": "exacttargettha",
							"activities": [
								{
									"name": "Get files exacttargettha",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BinarySFTPexacttargettha",
											"type": "DatasetReference",
											"parameters": {
												"directory": {
													"value": "@{activity('read parameters').output.value[0].ftpDirectory}",
													"type": "Expression"
												},
												"filename": {
													"value": "*@{activity('read parameters').output.value[0].file_spec}*.@{activity('read parameters').output.value[0].source_extn}",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "SftpReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false,
											"disableChunking": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "files exacttargettha",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get files exacttargettha",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "getFiles",
										"value": {
											"value": "@string(activity('Get files exacttargettha').output.childItems)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set error exacttargettha",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get files exacttargettha",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorResponse",
										"value": {
											"value": "@activity('Get files exacttargettha').error?.message",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"value": "marketingcloudopstha",
							"activities": [
								{
									"name": "Get files marketingcloudopstha",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "BinarySFTPmarketingcloudopstha",
											"type": "DatasetReference",
											"parameters": {
												"directory": {
													"value": "@{activity('read parameters').output.value[0].ftpDirectory}",
													"type": "Expression"
												},
												"filename": {
													"value": "*@{activity('read parameters').output.value[0].file_spec}*.@{activity('read parameters').output.value[0].source_extn}",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "SftpReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false,
											"disableChunking": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "files marketingcloudopstha",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get files marketingcloudopstha",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "getFiles",
										"value": {
											"value": "@string(activity('Get files marketingcloudopstha').output.childItems)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set error marketingcloudopstha",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get files marketingcloudopstha",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorResponse",
										"value": {
											"value": "@activity('Get files marketingcloudopstha').error?.message",
											"type": "Expression"
										}
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "Fail - FTP Source",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "Set error unknown ftp",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": "Fail - FTP Source Unknown",
								"errorCode": "404"
							}
						},
						{
							"name": "Set error unknown ftp",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "errorResponse",
								"value": "Unknown FTP Source "
							}
						}
					]
				}
			},
			{
				"name": "FilterOnlyFile",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "Switch SFTP",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@json(variables('getFiles'))",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(item().type,'File')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set sheet_names array",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "ForEveryFileInFTP",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "sheet_names",
					"value": {
						"value": "@if(equals(coalesce(activity('read parameters').output.value[0].sheet_names, variables('emptyArray')),variables('emptyArray')),variables('emptyArray'),split(activity('read parameters').output.value[0].sheet_names,','))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "ForEveryFile",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "If is_truncate Y",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('FilterOnlyFile').output.Value",
						"type": "Expression"
					},
					"isSequential": false,
					"batchCount": 20,
					"activities": [
						{
							"name": "Execute Load_File",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "Load_File",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"usecase_id": {
										"value": "@pipeline().parameters.usecase_id",
										"type": "Expression"
									},
									"sequence_id": {
										"value": "@pipeline().parameters.sequence_id",
										"type": "Expression"
									},
									"process_id": {
										"value": "@pipeline().parameters.process_id",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									},
									"sourceFileName": {
										"value": "@item().name",
										"type": "Expression"
									},
									"parameters": {
										"value": "@activity('read parameters').output",
										"type": "Expression"
									},
									"sheetNames": {
										"value": "@variables('sheet_names')",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "If is_truncate Y",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Set sheet_names array",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@and(equals(activity('read parameters').output.value[0].is_truncate,'Y'),or(greater(activity('FilterOnlyFile').output.FilteredItemsCount,0),equals(activity('read parameters').output.value[0].is_forced_truncate,'Y')))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "truncate table",
							"type": "Script",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "adfadbplt001lssnfkpltdnaload",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "NonQuery",
										"text": {
											"value": "TRUNCATE TABLE @{activity('read parameters').output.value[0].target_schema}.@{activity('read parameters').output.value[0].target_table};",
											"type": "Expression"
										}
									}
								],
								"scriptBlockExecutionTimeout": "02:00:00"
							}
						}
					]
				}
			},
			{
				"name": "ForEveryFileInFTP",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "FilterOnlyFile",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('FilterOnlyFile').output.Value",
						"type": "Expression"
					},
					"isSequential": false,
					"batchCount": 20,
					"activities": [
						{
							"name": "Execute SFTP_To_ADLS",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "SFTP_To_ADLS",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"FtpDirectory": {
										"value": "@activity('read parameters').output.value[0].ftpDirectory",
										"type": "Expression"
									},
									"FtpFileName": {
										"value": "@item().Name",
										"type": "Expression"
									},
									"FtpName": {
										"value": "@activity('read parameters').output.value[0].ftpName",
										"type": "Expression"
									},
									"AdlsContainer": {
										"value": "@activity('read parameters').output.value[0].container",
										"type": "Expression"
									},
									"AdlsPath": {
										"value": "@{if(equals(pipeline().globalParameters.environment, 'prod'),'prd', pipeline().globalParameters.environment)}/@{activity('read parameters').output.value[0].FOLDER_PATH}",
										"type": "Expression"
									},
									"category": {
										"value": "@pipeline().parameters.category",
										"type": "Expression"
									},
									"usecase_id": {
										"value": "@pipeline().parameters.usecase_id",
										"type": "Expression"
									},
									"sequence_id": {
										"value": "@pipeline().parameters.sequence_id",
										"type": "Expression"
									},
									"process_id": {
										"value": "@pipeline().parameters.process_id",
										"type": "Expression"
									},
									"phase_id": {
										"value": "@pipeline().parameters.phase_id",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "audit fail - directory not present",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Switch SFTP",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "error log - directory not present",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Switch SFTP",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_error_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"job_name": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"error_message": {
							"value": "@variables('errorResponse')",
							"type": "Expression"
						},
						"run_id": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						},
						"error_code": "00",
						"job_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Send error - directory not present",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Switch SFTP",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "NotifiyTeamsChannelPipeline",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"subscription": {
							"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_subscription_id, pipeline().globalParameters.dev_subscription_id)",
							"type": "Expression"
						},
						"resourceGroup": {
							"value": "@if(equals(pipeline().globalParameters.environment, 'prod'),pipeline().globalParameters.prod_resource_group, pipeline().globalParameters.dev_resource_group)",
							"type": "Expression"
						},
						"runId": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"name": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"triggerTime": {
							"value": "@pipeline().TriggerTime",
							"type": "Expression"
						},
						"status": "FAIL",
						"supportMessage": {
							"value": "There is some issue with folder path or file location : \\n\n**PROCESS_ID**:  @{pipeline().parameters.process_id}  \\n\n**CATEGORY**: @{pipeline().parameters.category} \\n\n**PHASE_ID**:   @{pipeline().parameters.phase_id}   \\n\n**USECASE_ID**: @{pipeline().parameters.usecase_id} \\n\n**SEQUENCE_ID**: @{pipeline().parameters.sequence_id} \\n\n**FTP_NAME**: @{activity('read parameters').output.value[0].ftpName} \\n\n**FTP_DIRECTORY**: @{activity('read parameters').output.value[0].ftpDirectory} \\n\n**FILE_PREFIX**: @{activity('read parameters').output.value[0].FILE_SPEC} \\n\n**ERROR**: _@{variables('errorResponse')}_",
							"type": "Expression"
						},
						"isBusinessNotification": "No",
						"isSupportNotification": "Yes",
						"isError": "Yes"
					}
				}
			},
			{
				"name": "audit success",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "ForEveryFile",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FINISH",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline is completed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "audit fail",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "ForEveryFile",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "write_audit_log",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"process_id": {
							"value": "@pipeline().parameters.process_id",
							"type": "Expression"
						},
						"status": "FAIL",
						"input_row_count": 0,
						"output_row_count": 0,
						"jobname": {
							"value": "@pipeline().Pipeline",
							"type": "Expression"
						},
						"message": {
							"value": "@concat(pipeline().Pipeline,' pipeline has failed for use case ', string(pipeline().parameters.category))",
							"type": "Expression"
						},
						"runid": {
							"value": "@pipeline().RunId",
							"type": "Expression"
						},
						"pipeline_id": {
							"value": "@pipeline()?.TriggeredByPipelineRunId",
							"type": "Expression"
						},
						"category": {
							"value": "@pipeline().parameters.category",
							"type": "Expression"
						},
						"usecase_id": {
							"value": "@pipeline().parameters.usecase_id",
							"type": "Expression"
						},
						"phase_id": {
							"value": "@pipeline().parameters.phase_id",
							"type": "Expression"
						}
					}
				}
			}
		],
		"parameters": {
			"category": {
				"type": "string",
				"defaultValue": "SFTP_TEST_202"
			},
			"usecase_id": {
				"type": "int",
				"defaultValue": 59
			},
			"sequence_id": {
				"type": "int",
				"defaultValue": 3
			},
			"process_id": {
				"type": "int",
				"defaultValue": 202
			},
			"phase_id": {
				"type": "int",
				"defaultValue": 1
			}
		},
		"variables": {
			"getFiles": {
				"type": "String"
			},
			"sheet_names": {
				"type": "Array"
			},
			"emptyArray": {
				"type": "Array",
				"defaultValue": []
			},
			"errorResponse": {
				"type": "String"
			}
		},
		"folder": {
			"name": "Ingestion/Sources"
		},
		"annotations": [],
		"lastPublishTime": "2023-11-28T12:20:59Z"
	}
}